@startuml

title Empresa de Transporte

class EmpresaGestora {
    - nombre: String
    - direccion: String
    - telefono: String
    - email: String
    - empresasTransportistas: List<idEmpresaTransportista>
    - paquetes: List<idPaquete>
    - clientes: List<idCliente>

    + registrarPaquete(paquete: Paquete, cliente: Cliente): void
    + validarInformacion(paquete: Paquete): boolean
    + asignarTransportista(paquete: Paquete): Transportista
    + generarHojaDeRuta(paquete: Paquete, transportista: Transportista): HojaDeRuta
    + notificarTransportista(transportista: Transportista, hojaDeRuta: HojaDeRuta): void
    + notificarCliente(cliente: Cliente, mensaje: String): void
}

class Cliente {
    - idCliente: String
    - apellido: String
    - nombre: String
    - documento: String
    - direccion: String
    - entreCalles: String
    - localidad: String
    - provincia: String

    + recibirNotificacion(mensaje: String): void
}

class Paquete {
    - idPaquete: String //codigoPaquete
    - peso: double
    - dimensiones: String
    - status: String
    - envios: List<idEnvio>
    - cliente: idCliente

    + actualizarEstado(nuevoEstado: String): void
}

class EmpresaTransportista {
    - idEmpresaTransportista: String
    - nombre: String
    - direccion: String
    - telefono: String
    - email: String
    - transportistas: List<idTransportista>
}

class Transportista {
    - idTransportista: String
    - nombre: String
    - documento: String
    - tipo: String // Empresa o Monotributista
    - vencimientoRegistro: Date
    - datosVehiculo: String
    - polizaVehiculo: String
    - ultimaVTV: Date
    - cargaUtil: double
    - rutas: List<idHojaDeRuta>

    + puedeTransportar(peso: double): boolean
    + recibirHojaDeRuta(hojaDeRuta: HojaDeRuta): void
    + intentarEntrega(paquete: Paquete): boolean
    + registrarEntregaExitosa(paquete: Paquete): void
    + registrarIntentoFallido(paquete: Paquete): void
    + programarNuevaVisita(paquete: Paquete): void
}

class Envio {
    - idEnvio: String
    - fechaEnvio: Date
    - fechaEntrega: Date
    - estado: String // Recibido, En tránsito, Entregado, En almacén
    - intentos: int
    - proximaVisita: Date
    - paquete: idPaquete

    + registrarIntentoFallido(motivo: String): void
    + programarNuevaVisita(fecha: Date): void
    + actualizarEstado(nuevoEstado: String): void
}

class HojaDeRuta {
    - idHojaDeRuta: String
    - fecha: Date
    - envio: idEnvio
    - detallesMercaderia: String
    - destino: String
    - receptor: String
    - fechaRecepcion: Date
    - motivoNoEntrega: String
    - transportista: idTransportista

    + registrarEntrega(receptor: String, fecha: Date, hora: String): void
    + registrarNoEntrega(motivo: String, fecha: Date, hora: String): void
}

EmpresaGestora "1" *--- "0..*" Cliente
EmpresaGestora "1" *--- "0..*" Paquete
Cliente "1" --left-- "0..*" Paquete
Paquete "1" *-- "0..*" Envio
Envio "1" *-- "1" HojaDeRuta
HojaDeRuta "1" -right- "1" Transportista
EmpresaGestora "1" -right- "0..*" EmpresaTransportista
EmpresaTransportista "1" *-- "1..*" Transportista

@enduml
